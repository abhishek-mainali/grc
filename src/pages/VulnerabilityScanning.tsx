import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Search, Shield, AlertTriangle, CheckCircle, Play } from "lucide-react";
import { MetricCard } from "@/components/MetricCard";
import { StatusBadge } from "@/components/StatusBadge";
import { toast } from "@/components/ui/sonner";

const vulnerabilityScans = [
  {
    id: "SCAN001",
    system: "Web Application Server",
    lastScan: "2024-01-15 10:30",
    status: "completed",
    critical: 2,
    high: 5,
    medium: 12,
    low: 8,
    progress: 100
  },
  {
    id: "SCAN002", 
    system: "Database Server",
    lastScan: "2024-01-15 09:15",
    status: "running",
    critical: 0,
    high: 3,
    medium: 7,
    low: 4,
    progress: 75
  },
  {
    id: "SCAN003",
    system: "Network Infrastructure",
    lastScan: "2024-01-14 14:20",
    status: "completed",
    critical: 1,
    high: 2,
    medium: 8,
    low: 15,
    progress: 100
  }
];

const recentVulnerabilities = [
  {
    id: "CVE-2024-0001",
    name: "SQL Injection Vulnerability",
    severity: "critical" as const,
    system: "Web Application",
    cvssScore: 9.8,
    status: "open" as const,
    discoveredDate: "2024-01-15",
    description: "Critical SQL injection vulnerability in user authentication module"
  },
  {
    id: "CVE-2024-0002",
    name: "Cross-Site Scripting (XSS)",
    severity: "high" as const,
    system: "Web Application",
    cvssScore: 7.4,
    status: "in-progress" as const,
    discoveredDate: "2024-01-14",
    description: "Reflected XSS vulnerability in search functionality"
  },
  {
    id: "CVE-2024-0003",
    name: "Outdated Software Component",
    severity: "medium" as const,
    system: "Database Server",
    cvssScore: 5.5,
    status: "resolved" as const,
    discoveredDate: "2024-01-13",
    description: "Outdated library version with known security issues"
  }
];

export default function VulnerabilityScanning() {
  const [isScanning, setIsScanning] = useState(false);
  const [scans, setScans] = useState(vulnerabilityScans);
  
  const totalVulns = recentVulnerabilities.length;
  const criticalVulns = recentVulnerabilities.filter(v => v.severity === "critical").length;
  const openVulns = recentVulnerabilities.filter(v => v.status === "open").length;
  const scanCompliance = "92%";

  const handleStartScan = async () => {
    setIsScanning(true);
    toast.success("Starting new vulnerability scan...");
    
    // Simulate scan process
    setTimeout(() => {
      const newScan = {
        id: `SCAN${String(scans.length + 1).padStart(3, '0')}`,
        system: "New System Scan",
        lastScan: new Date().toLocaleString(),
        status: "running" as const,
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        progress: 0
      };
      
      setScans([newScan, ...scans]);
      setIsScanning(false);
      toast.success("Vulnerability scan initiated successfully!");
    }, 1000);
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold gradient-text">Vulnerability Scanning</h1>
          <p className="text-muted-foreground">Identify and track security vulnerabilities across systems</p>
        </div>
        <Button className="button-glow" onClick={handleStartScan} disabled={isScanning}>
          <Play className="mr-2 h-4 w-4" />
          {isScanning ? "Starting..." : "Start New Scan"}
        </Button>
      </div>

      {/* Metrics Cards */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <MetricCard
          title="Total Vulnerabilities"
          value={totalVulns}
          description="Currently tracked"
          icon={Search}
          className="hover:rotate-1 transition-transform duration-300"
        />
        <MetricCard
          title="Critical Vulnerabilities"
          value={criticalVulns}
          description="Require immediate action"
          icon={AlertTriangle}
          variant="destructive"
          className="hover:-rotate-1 transition-transform duration-300"
        />
        <MetricCard
          title="Open Vulnerabilities"
          value={openVulns}
          description="Awaiting remediation"
          icon={Shield}
          variant="warning"
          className="hover:rotate-1 transition-transform duration-300"
        />
        <MetricCard
          title="Scan Compliance"
          value={scanCompliance}
          description="Systems scanned regularly"
          icon={CheckCircle}
          variant="success"
          className="hover:-rotate-1 transition-transform duration-300"
        />
      </div>

      {/* Scan Status */}
      <Card className="glass-effect">
        <CardHeader>
          <CardTitle>Scan Status</CardTitle>
          <CardDescription>
            Current status of vulnerability scans across all systems
          </CardDescription>
        </CardHeader>
        <CardContent className="shimmer">
          <div className="space-y-4">
            {scans.map((scan) => (
              <div key={scan.id} className="flex items-center space-x-4 p-4 border rounded-lg hover-scale interactive-card">
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">{scan.system}</h4>
                    <Badge variant={scan.status === "completed" ? "secondary" : "default"} className="pulse-glow">
                      {scan.status}
                    </Badge>
                  </div>
                  <div className="text-sm text-muted-foreground mb-2">
                    Last scan: {scan.lastScan}
                  </div>
                  {scan.status === "running" && (
                    <Progress value={scan.progress} className="h-2 mb-2 animate-pulse" />
                  )}
                  <div className="flex space-x-4 text-sm">
                    <span className="text-destructive">Critical: {scan.critical}</span>
                    <span className="text-warning">High: {scan.high}</span>
                    <span className="text-info">Medium: {scan.medium}</span>
                    <span className="text-success">Low: {scan.low}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Vulnerabilities Table */}
      <Card className="glass-effect">
        <CardHeader>
          <CardTitle>Recent Vulnerabilities</CardTitle>
          <CardDescription>
            Latest discovered vulnerabilities requiring attention
          </CardDescription>
        </CardHeader>
        <CardContent className="shimmer">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>CVE ID</TableHead>
                <TableHead>Name</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>CVSS Score</TableHead>
                <TableHead>System</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Discovered</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {recentVulnerabilities.map((vuln) => (
                <TableRow key={vuln.id} className="hover:bg-accent/10 transition-colors duration-200">
                  <TableCell className="font-medium">{vuln.id}</TableCell>
                  <TableCell>
                    <div>
                      <div className="font-medium">{vuln.name}</div>
                      <div className="text-sm text-muted-foreground">{vuln.description}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <StatusBadge status={vuln.severity} />
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="pulse-glow">{vuln.cvssScore}</Badge>
                  </TableCell>
                  <TableCell>{vuln.system}</TableCell>
                  <TableCell>
                    <StatusBadge status={vuln.status} />
                  </TableCell>
                  <TableCell>{vuln.discoveredDate}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}